# myCie.py

import numpy as np

from .myCct import xy_to_cct


CIE_DEFAULT_ILLUMINANT = "E"
CIE_STANDARD_EPSILON = 0.00885645
CIE_STANDARD_KAPPA = 903.2963


def XYZ_to_xy(X, Y, Z):
    """Convert XYZ to CIE1931-xy
    """
    x, y, z = np.array(X), np.array(Y), np.array(Z)
    sumXYZ = x + y + z
    xy_x = x / sumXYZ
    xy_y = y / sumXYZ
    return xy_x, xy_y


def XYZ_to_uv(X, Y, Z):
    """Convert XYZ to CIE1960-uv
    """
    x, y, z = np.array(X), np.array(Y), np.array(Z)
    denom = x + 15*y + 3*z
    uv_u = 4*x / denom
    uv_v = 6*y / denom
    return uv_u, uv_v


def XYZ_to_upvp(X, Y, Z):
    """Convert XYZ to CIE1976-u'v'
    """
    x, y, z = np.array(X), np.array(Y), np.array(Z)
    denom = x + 15*y + 3*z
    upvp_up = 4*x / denom
    upvp_vp = 9*y / denom
    return upvp_up, upvp_vp


def XYZ_to_Lab(X, Y, Z, refwhite: str | tuple):
    """Convert XYZ to CIE1976-Lab

    reference:
    - https://en.wikipedia.org/wiki/CIELAB_color_space
    """
    default_illuminant = StandardIlluminants(CIE_DEFAULT_ILLUMINANT)
    Xr, Yr, Zr = default_illuminant.XYZ()
    if refwhite:
        if isinstance(refwhite, str):
            if refwhite in default_illuminant.illuminants.keys():
                Xr, Yr, Zr = StandardIlluminants(refwhite).XYZ()
        elif isinstance(refwhite, tuple):
            if len(refwhite) == 3:
                Xr, Yr, Zr = refwhite[0], refwhite[1], refwhite[2]
            elif len(refwhite) == 2:
                Xr, Yr, Zr = xy_to_XYZ(refwhite[0], refwhite[1])

    def f(x):
        return np.where(x > CIE_STANDARD_EPSILON, x**(1/3), (x*CIE_STANDARD_KAPPA+16.)/116.)

    X, Y, Z = np.array(X), np.array(Y), np.array(Z)
    xr, yr, zr = X/Xr, Y/Yr, Z/Zr
    lab_l = 116.0 * f(yr) - 16.0
    lab_a = 500.0 * (f(xr) - f(yr))
    lab_b = 200.0 * (f(yr) - f(zr))
    return lab_l, lab_a, lab_b


def mixed_XYZ_to_xy(X1, Y1, Z1, X2, Y2, Z2, ratios: tuple=(1, 1)):
    """ 두 광원 (x1,y1), (x2,y2)를 휘도비 r,(1-r)로 더할때 결과 색좌표 계산
    """
    r1 = ratios[0] / (ratios[0] + ratios[1])
    r2 = 1 - r1
    X1, Y1, Z1 = np.array(X1), np.array(Y1), np.array(Z1)
    X2, Y2, Z2 = np.array(X2), np.array(Y2), np.array(Z2)
    xy_x1, xy_y1 = XYZ_to_xy(X1, Y1, Z1)
    xy_x2, xy_y2 = XYZ_to_xy(X2, Y2, Z2)
    sumY1Y2 = r1 * Y1 + r2 * Y2
    xy_x = ((r1 * xy_x1 * Y1) + (r2 * xy_x2 * Y2)) / sumY1Y2
    xy_y = ((r1 * xy_y1 * Y1) + (r2 * xy_y2 * Y2)) / sumY1Y2
    return xy_x, xy_y


def xy_to_XYZ(x, y):
    """Convert CIE1931-xy to CIEXYZ
    """
    x, y = np.array(x), np.array(y)
    xyz_y = np.full(x.shape, 100.0)
    xyz_x = x * xyz_y / y
    xyz_z = (1 - x - y) * xyz_y / y
    return xyz_x, xyz_y, xyz_z


def xy_to_upvp(x, y):
    """Convert CIE1931-xy to CIE1976-u'v'
    """
    x, y = np.array(x), np.array(y)
    upvp_up = 4*x / (-2*x + 12*y + 3)
    upvp_vp = 9*y / (-2*x + 12*y + 3)
    return upvp_up, upvp_vp


def xy_to_uv(x, y):
    """Convert CIE1931-xy to CIE1960-uv
    """
    x, y = np.array(x), np.array(y)
    denom = -2*x + 12*y + 3
    uv_u = (4.0 * x) / denom  # uv1960-u
    uv_v = (6.0 * y) / denom  # uv1960-v
    return uv_u, uv_v


def uv_to_xy(u, v):  # uv1960-u,v
    """Convert CIE1960-uv to CIE1931-xy
    """
    u, v = np.array(u), np.array(v)
    denom = 2*u -8*v +4
    xy_x = 3*u / denom
    xy_y = 2*v / denom
    return xy_x, xy_y


def upvp_to_xy(up, vp):  # uv1960-u,v
    """Convert CIE1976-u'v' to CIE1931-xy
    """
    up, vp = np.array(up), np.array(vp)
    denom = 6*up -16*vp + 12
    xy_x = 9*up / denom
    xy_y = 4*vp / denom
    return xy_x, xy_y


def Lab_to_XYZ(L, a, b, refwhite: str | tuple):
    """Convert CIELAB to CIEXYZ

    http://www.brucelindbloom.com/index.html?Eqn_XYZ_to_RGB.html
    """
    default_illuminant = StandardIlluminants(CIE_DEFAULT_ILLUMINANT)
    Xr, Yr, Zr = default_illuminant.XYZ()
    if refwhite:
        if isinstance(refwhite, str):
            if refwhite in default_illuminant.illuminants.keys():
                Xr, Yr, Zr = StandardIlluminants(refwhite).XYZ()
        elif isinstance(refwhite, tuple):
            if len(refwhite) == 3:
                Xr, Yr, Zr = refwhite[0], refwhite[1], refwhite[2]
            elif len(refwhite) == 2:
                Xr, Yr, Zr = xy_to_XYZ(refwhite[0], refwhite[1])

    L, a, b = np.array(L), np.array(a), np.array(b)
    fy = (L + 16.) / 116.
    fx = (a / 500.) + fy
    fz = fy - (b / 200.)

    xr = np.where(fx**3 > CIE_STANDARD_EPSILON, fx**3, (116.*fx - 16.)/CIE_STANDARD_KAPPA)
    yr = np.where(L > CIE_STANDARD_EPSILON, ((L + 16)/116)**3, L/CIE_STANDARD_KAPPA)
    zr = np.where(fz**3 > CIE_STANDARD_EPSILON, fz**3, (116.*fz - 16.)/CIE_STANDARD_KAPPA)

    X, Y, Z = xr * Xr, yr * Yr, zr * Zr
    return X, Y, Z


def Lab_to_dE00(Lab1: tuple, Lab2: tuple):
    """ Calculate the DE2000 between 2-points having Lab-value.
    source: https://hajim.rochester.edu/ece/sites/gsharma/papers/CIEDE2000CRNAFeb05.pdf
    source: https://en.wikipedia.org/wiki/Color_difference
    RT = hue rotation term
    SL = compensation for lightness
    SC = compensation for chroma
    SH = compensation for hue
    This formula should use degrees rather than radians; the issue is significant for RT.
    """
    # Lab1, Lab2 = np.array(Lab1), np.array(Lab2)
    L1, a1, b1 = Lab1[0], Lab1[1], Lab1[2]
    L2, a2, b2 = Lab2[0], Lab2[1], Lab2[2]

    # parametric weighting factors
    kL, kC, kH = 1., 1., 1.

    # 1. Calculate C'1, h'1
    C1, C2 = np.sqrt(a1**2 + b1**2), np.sqrt(a2**2 + b2**2)  # eq(2)
    C_ = (C1 + C2) / 2  # eq(3)
    G = 0.5 * (1 - np.sqrt(C_**7 / (C_**7 + 25**7)))  # eq(4)
    a1p, a2p = (1 + G) * a1, (1 + G) * a2  # eq(5)
    C1p, C2p = np.sqrt(a1p**2 + b1**2), np.sqrt(a2p**2 + b2**2)  # eq(6)

    # Function to calculate h1p and h2p
    def calculate_h_p(b, a_p):
        return np.where((b == 0) & (a_p == 0), 0, np.degrees(np.arctan2(b, a_p) + np.pi*2))

    h1p = calculate_h_p(b1, a1p)
    h2p = calculate_h_p(b2, a2p)

    # 2. Calculate dL', dC', dH'
    dLp = L2 - L1  # eq(8)
    dCp = C2p - C1p  # eq(9)
    mCp = C1p*C2p  # eq(10)
    d_h21p = h2p - h1p
    _dhp = np.where(mCp == 0,  0.0,
            np.where((mCp != 0) & (abs(d_h21p) <= 180), d_h21p,
                np.where((mCp != 0) & (d_h21p > 180), d_h21p - 360,
                    np.where((mCp != 0) & (d_h21p < -180), d_h21p + 360, 0))))
    dHp = 2 * np.sqrt(mCp) * np.sin(np.radians(_dhp * 0.5))  # eq(11)

    # 3. Calculate CIEDE2000 Color-Difference dE00
    L_p = (L1 + L2) / 2  # eq(12)
    C_p = (C1p + C2p) / 2  # eq(13)
    d_h12p = abs(h1p - h2p)
    sum_h12p = h1p + h2p
    h_p = np.where((d_h12p <= 180) & (mCp != 0), sum_h12p*0.5,
            np.where((d_h12p > 180) & (sum_h12p < 360) & (mCp != 0), (sum_h12p + 360)*0.5,
                np.where((d_h12p > 180) & (sum_h12p >= 360) & (mCp != 0), (sum_h12p - 360)*0.5,
                    np.where(mCp == 0, sum_h12p, 0))))

    T = (1 - 0.17 * np.cos(np.radians(h_p - 30)) + 0.24 * np.cos(np.radians(2 * h_p))
        + 0.32 * np.cos(np.radians(3 * h_p + 6)) - 0.20 * np.cos(np.radians(4 * h_p - 63))
    )  # eq(15)
    dtheta = 30 * np.exp(-(((h_p - 275) / 25) ** 2))  # eq(16)
    RC = 2 * np.sqrt(C_p**7 / (C_p**7 + 25**7))  # eq(17)
    SL = 1 + (0.015 * (L_p - 50)**2 / np.sqrt(20 + (L_p - 50)**2))  # eq(18)
    SC = 1 + 0.045 * C_p  # eq(19)
    SH = 1 + 0.015 * C_p * T  # eq(20)
    RT = -np.sin(np.radians(2 * dtheta)) * RC  # eq(21)

    dE00 = np.sqrt((dLp / (kL * SL))**2 + (dCp / (kC * SC))**2 + (dHp / (kH * SH))**2
        + RT * (dCp / (kC * SC)) * (dHp / (kH * SH))
    )  # eq(22)

    return dE00



def Lab_to_dE00_deprecated(Lab1: list, Lab2: list):
    """ Calculate the DE2000 from XYZs
    source: https://hajim.rochester.edu/ece/sites/gsharma/papers/CIEDE2000CRNAFeb05.pdf
    source: https://en.wikipedia.org/wiki/Color_difference
    RT = hue rotation term
    SL = compensation for lightness
    SC = compensation for chroma
    SH = compensation for hue
    This formula should use degrees rather than radians; the issue is significant for RT.
    """
    L1, a1, b1 = Lab1[0], Lab1[1], Lab1[2]
    L2, a2, b2 = Lab2[0], Lab2[1], Lab2[2]
    # sqrt = np.sqrt
    # parametric weighting factors
    kL, kC, kH = 1., 1., 1.

    # 1. Calculate C'1, h'1
    C1, C2 = np.sqrt(a1**2 + b1**2), np.sqrt(a2**2 + b2**2)  # eq(2)
    C_ = (C1 + C2) / 2  # eq(3)
    G = 0.5 * (1 - np.sqrt(C_**7 / (C_**7 + 25**7)))  # eq(4)
    a1p, a2p = (1 + G) * a1, (1 + G) * a2  # eq(5)
    C1p, C2p = np.sqrt(a1p**2 + b1**2), np.sqrt(a2p**2 + b2**2)  # eq(6)
    if b1 == 0 and a1p == 0:  # eq(7)
        h1p = 0  # modified hue
    else:
        h1p = np.degrees(np.arctan2(b1, a1p) + np.pi * 2)  # degrees(0~360)

    if b2 == 0 and a2p == 0:  # eq(7)
        h2p = 0
    else:
        h2p = np.degrees(np.arctan2(b2, a2p) + np.pi * 2)  # degrees(0~360)

    # 2. Calculate dL', dC', dH'
    dLp = L2 - L1  # eq(8)
    dCp = C2p - C1p  # eq(9)
    dhp = 0.0
    if C1p * C2p == 0:  # eq(10)
        dhp = 0.0
    elif C1p * C2p != 0 and abs(h2p - h1p) <= 180:
        dhp = h2p - h1p
    elif C1p * C2p != 0 and (h2p - h1p) > 180:
        dhp = (h2p - h1p) - 360
    elif C1p * C2p != 0 and (h2p - h1p) < -180:
        dhp = (h2p - h1p) + 360

    dHp = 2 * np.sqrt(C1p * C2p) * np.sin(np.radians(dhp / 2))  # eq(11)

    # 3. Calculate CIEDE2000 Color-Difference dE00
    L_p = (L1 + L2) / 2  # eq(12)
    C_p = (C1p + C2p) / 2  # eq(13)
    h_p = 0
    if abs(h1p - h2p) <= 180 and C1p * C2p != 0:  # eq(14)
        h_p = (h1p + h2p) / 2
    elif abs(h1p - h2p) > 180 and (h1p + h2p) < 360 and C1p * C2p != 0:
        h_p = (h1p + h2p + 360) / 2
    elif abs(h1p - h2p) > 180 and (h1p + h2p) >= 360 and C1p * C2p != 0:
        h_p = (h1p + h2p - 360) / 2
    elif C1p * C2p == 0:
        h_p = h1p + h2p

    T = (1 - 0.17 * np.cos(np.radians(h_p - 30)) + 0.24 * np.cos(np.radians(2 * h_p))
        + 0.32 * np.cos(np.radians(3 * h_p + 6)) - 0.20 * np.cos(np.radians(4 * h_p - 63))
    )  # eq(15)
    dtheta = 30 * np.exp(-(((h_p - 275) / 25) ** 2))  # eq(16)
    RC = 2 * np.sqrt(C_p**7 / (C_p**7 + 25**7))  # eq(17)
    SL = 1 + (0.015 * (L_p - 50)**2 / np.sqrt(20 + (L_p - 50)**2))  # eq(18)
    SC = 1 + 0.045 * C_p  # eq(19)
    SH = 1 + 0.015 * C_p * T  # eq(20)
    RT = -np.sin(np.radians(2 * dtheta)) * RC  # eq(21)

    dE00 = np.sqrt((dLp / (kL * SL))**2 + (dCp / (kC * SC))**2 + (dHp / (kH * SH))**2
        + RT * (dCp / (kC * SC)) * (dHp / (kH * SH))
    )  # eq(22)

    return dE00



class HorseShoe_xy1931:
    def __init__(self):
        self.wd = np.array((
            390,395,400,405,410,415,420,425,430,435,440,445,450,455,460,465,470,475,480,485,490,495,
            500,505,510,515,520,525,530,535,540,545,550,555,560,565,570,575,580,585,590,595,600,605,
            610,615,620,625,630,635,640,645,650,655,660,665,670,675,680,685,690,700))
        self.xy_x = np.array((
            0.173336886,0.173020965,0.172576551,0.172086631,0.171407434,0.170301002,0.168877521,0.16689529,
            0.164411756,0.16110458,0.156640933,0.150985408,0.143960396,0.135502671,0.124118477,0.109594324,
            0.091293516,0.06870591,0.045390735,0.023459943,0.008168028,0.003858521,0.013870246,0.038851802,
            0.074302424,0.114160721,0.154722061,0.192876183,0.229619673,0.265775085,0.301603869,0.337363289,
            0.373101544,0.408736255,0.444062464,0.478774791,0.512486367,0.544786506,0.575151311,0.602932786,
            0.6270366,0.648233106,0.665763576,0.68007885,0.691503998,0.700606061,0.707917792,0.714031597,
            0.719032942,0.723031603,0.725992318,0.728271728,0.729969013,0.731089396,0.7319933,0.732718894,
            0.733416967,0.7340473,0.734390165,0.734591662,0.734687278,0.173336886))
        self.xy_y = np.array((
            0.004796744,0.00477505,0.004799302,0.004832524,0.005102171,0.005788505,0.006900244,0.008555606,
            0.010857558,0.013793359,0.017704805,0.022740193,0.02970297,0.039879121,0.057802513,0.086842511,
            0.132702055,0.20072322,0.294975965,0.412703479,0.538423071,0.654823151,0.750186428,0.812016021,
            0.833803082,0.826206968,0.805863545,0.781629131,0.75432909,0.724323925,0.692307692,0.658848333,
            0.62445086,0.589606869,0.554713903,0.520202307,0.486590788,0.454434115,0.424232235,0.396496634,
            0.372491145,0.351394916,0.334010651,0.319747217,0.308342236,0.299300699,0.292027109,0.285928874,
            0.280934952,0.276948358,0.274007682,0.271728272,0.270030987,0.268910604,0.2680067,0.267281106,
            0.266583033,0.2659527,0.265609835,0.265408338,0.265312722,0.004796744))

    def is_inside(self, point):
        polygon = np.dstack([self.xy_x, self.xy_y])
        num_vertices = len(polygon)
        intersection_count = 0
        for i in range(num_vertices):
            x1, y1 = polygon[i]
            x2, y2 = polygon[(i + 1) % num_vertices]
            if (y1 > point[1]) != (y2 > point[1]):
                if point[0] < (x2 - x1) * (point[1] - y1) / (y2 - y1) + x1:
                    intersection_count += 1
        return intersection_count % 2 == 1  # True, False



class HorseShoe_uv1976:
    def __init__(self):
        self.wd = np.array((
            390,395,400,405,410,415,420,425,430,435,440,445,450,455,460,465,470,475,480,485,490,495,500,
            505,510,515,520,525,530,535,540,545,550,555,560,565,570,575,580,585,590,595,600,605,610,615,
            620,625,630,635,640,645,650,655,660,665,670,675,680,685,690,700))
        self.upvp_up = np.array((
            0.255764075,0.255262941,0.254496534,0.253645148,0.252217082,0.249629513,0.246083169,0.241101802,
            0.234750929,0.226643616,0.216117881,0.203284963,0.187661332,0.168979963,0.144097895,0.114670755,
            0.082808959,0.052136166,0.028153963,0.011870155,0.003459292,0.001422475,0.004633262,0.012269163,
            0.023116509,0.035995353,0.050068144,0.064325311,0.079228991,0.095257011,0.112701874,0.131892616,
            0.153111157,0.176601706,0.202573031,0.231155986,0.262338731,0.29593341,0.331476188,0.368085551,
            0.403510105,0.437975161,0.469128351,0.496697154,0.520211506,0.539924911,0.556485582,0.570873244,
            0.583020931,0.592974859,0.600476569,0.606363069,0.610797296,0.613748576,0.616143814,0.618075802,
            0.61994234,0.621634388,0.622557422,0.623100752,0.623358806,0.255764075))
        self.upvp_vp = np.array((
            0.015924933,0.015850739,0.015924312,0.0160264,0.01689205,0.019090957,0.022623356,0.027809276,
            0.034881017,0.043660445,0.054961567,0.068888535,0.087119257,0.11189623,0.150990784,0.204446417,
            0.270830492,0.342708696,0.411662654,0.469840116,0.513069415,0.543163229,0.563838135,0.576966861,
            0.583667184,0.586139654,0.586750245,0.586525023,0.585623376,0.584114563,0.582070925,0.579549626,
            0.576581333,0.573187597,0.569362856,0.565104363,0.560436611,0.555419473,0.550118696,0.544630417,
            0.539336727,0.53419063,0.529559157,0.525438262,0.521916219,0.518978928,0.516507672,0.514354792,
            0.512535145,0.511046375,0.509928515,0.50904554,0.508380406,0.507937714,0.507578428,0.50728863,
            0.507008649,0.506754842,0.506616387,0.506534887,0.506496179,0.015924933))

    def is_inside(self, point):
        polygon = np.dstack([self.upvp_up, self.upvp_vp])
        num_vertices = len(polygon)
        intersection_count = 0
        for i in range(num_vertices):
            x1, y1 = polygon[i]
            x2, y2 = polygon[(i + 1) % num_vertices]
            if (y1 > point[1]) != (y2 > point[1]):
                if point[0] < (x2 - x1) * (point[1] - y1) / (y2 - y1) + x1:
                    intersection_count += 1
        return intersection_count % 2 == 1  # True, False



class Plankian_xy1931:
    def __init__(self):
        self.cct = np.array((
            2400,2600,2800,3000,3200,3400,3600,3800,4000,4200,4400,4600,4800,5000,5200,5400,5600,5800,6000,
            6200,6600,7000,7400,7800,8200,8600,9000,9400,9800,10000,11000,12000,13000,14000))
        self.xy_x = np.array((
            0.4861184,0.4682142,0.4518347,0.4369156,0.4233474,0.4110268,0.3998348,0.3896738,0.3804363,0.3720269,
            0.3643663,0.3573696,0.3509675,0.3451047,0.3397208,0.3347661,0.3302041,0.3259905,0.322091,0.318479,
            0.3120048,0.306387,0.3014791,0.2971652,0.2933537,0.2899672,0.2869411,0.284229,0.2817827,0.2806493,
            0.2757343,0.2718017,0.2686017,0.2659523))
        self.xy_y = np.array((
            0.4146904,0.4123223,0.4086497,0.4040903,0.3989732,0.3935257,0.3879313,0.3823166,0.3767725,0.371358,
            0.3661172,0.36108,0.3562481,0.3516441,0.3472518,0.3430781,0.3391196,0.3353579,0.331791,0.328415,
            0.322174,0.3165618,0.311504,0.3069374,0.3028035,0.2990557,0.295643,0.2925295,0.2896825,0.2883483,
            0.2824639,0.2776349,0.2736156,0.2702374))



class Plankian_uv1976():
    def __init__(self):
        self.cct = np.array((
            2300,2350,2400,2450,2500,2550,2600,2650,2700,2750,2800,2850,2900,2950,3000,3050,3100,3150,3200,
            3250,3300,3350,3400,3450,3500,3550,3600,3650,3700,3750,3800,3850,3900,3950,4000,4050,4100,4150,
            4200,4250,4300,4350,4400,4450,4500,4550,4600,4650,4700,4750,4800,4850,4900,4950,5000,5050,5100,
            5150,5200,5250,5300,5350,5400,5450,5500,5550,5600,5650,5700,5750,5800,5850,5900,5950,6000,6050,
            6100,6150,6200,6250,6300,6400,6500,6600,6700,6800,6900,7000,7100,7200,7300,7400,7500,7600,7700,
            7800,7900,8000,8100,8200,8300,8400,8500,8600,8700,8800,8900,9000,9100,9200,9300,9400,9500,9600,
            9700,9800,9900,10000,10500,11000,11500,12000,12500,13000,13500,14000))
        self.upvp_up = np.array((
            0.283579934,0.280536184,0.277621398,0.274827773,0.272148729,0.269580532,0.267114461,0.264746878,
            0.26247381,0.260288068,0.258186573,0.256168743,0.254223892,0.252352319,0.250551851,0.24881502,
            0.247138928,0.245527515,0.243969688,0.242467484,0.241015746,0.239619255,0.238267607,0.236958665,
            0.235698235,0.234474619,0.233292656,0.232150463,0.231044067,0.229971824,0.228935343,0.227931031,
            0.226957089,0.226013009,0.225097004,0.22420842,0.223348245,0.222514141,0.221700522,0.220913561,
            0.22014826,0.219407438,0.218685152,0.217981069,0.217301157,0.216636301,0.215991343,0.215362887,
            0.21475466,0.214160023,0.213579946,0.213015773,0.212469992,0.211934454,0.211411994,0.210906386,
            0.21041235,0.209930309,0.209459182,0.20900185,0.208556009,0.208116991,0.207690443,0.207278337,
            0.206872579,0.206475894,0.206086883,0.205709896,0.205342338,0.204982559,0.204629282,0.204285521,
            0.203948629,0.20361917,0.203298245,0.202983343,0.202675504,0.202374657,0.202079879,0.201792133,
            0.2015097,0.200963452,0.20043867,0.199936483,0.199453318,0.19899166,0.198545912,0.19811743,0.197705365,
            0.197309318,0.196926905,0.196560513,0.196205689,0.195863632,0.195535587,0.195217068,0.194909914,
            0.194612912,0.194327823,0.194051181,0.19378397,0.193522784,0.193273034,0.193030479,0.192795881,
            0.192567133,0.192347136,0.192131961,0.191926164,0.191723177,0.191527751,0.191338926,0.19115412,
            0.190973971,0.190800768,0.190631213,0.190467537,0.190306806,0.189568798,0.188920632,0.188346664,
            0.187837579,0.18738456,0.186977451,0.186610263,0.186275537))
        self.upvp_vp = np.array((
            0.534519892,0.533706867,0.532865223,0.531996398,0.531105281,0.53019331,0.529263764,0.52831619,
            0.527354783,0.526384303,0.525397225,0.524406036,0.52340406,0.52239956,0.521387972,0.520375918,
            0.519360459,0.518342543,0.517327083,0.516310399,0.5152971,0.514281446,0.513275437,0.51226766,
            0.511269034,0.510271704,0.509281401,0.508294902,0.507316762,0.506343934,0.505379138,0.50441907,
            0.503470019,0.502525079,0.501590705,0.500663214,0.499744964,0.498832388,0.497929291,0.497037648,
            0.496151719,0.4952729,0.494406013,0.4935481,0.492698331,0.49185587,0.491026229,0.490201261,
            0.4893892,0.488581577,0.48778523,0.486999633,0.486218586,0.485448917,0.484690605,0.483936918,
            0.483192361,0.482456689,0.481730661,0.481013229,0.480302194,0.479599923,0.478906304,0.478222175,
            0.477543119,0.476876536,0.476215251,0.475559341,0.474914867,0.474278314,0.473646025,0.473021942,
            0.472408282,0.471799284,0.471196612,0.470605277,0.470017118,0.469438105,0.468864956,0.468298783,
            0.467738831,0.466639881,0.465567377,0.464519318,0.463496075,0.46249556,0.461521461,0.460567592,
            0.459637037,0.458725063,0.457834825,0.456967394,0.456117107,0.455287954,0.454475526,0.453682644,
            0.452906762,0.452148065,0.45140695,0.450679837,0.449969155,0.449275239,0.448594935,0.447931511,
            0.447277679,0.446642008,0.446016642,0.445406934,0.444807435,0.444222438,0.443647316,0.443085086,
            0.442535531,0.441993752,0.441464769,0.440945042,0.440437558,0.439936778,0.437584969,0.435445759,
            0.433491291,0.431704812,0.43006276,0.42855232,0.427161889,0.425872941))



class CIE1931_StandardObserver:
    """CIE 1931 Standard Observer 2-degrees (360nm to 830nm in 5nm increments)
    """
    def __init__(self):
        self.wld = np.array(range(360,831,5))
        self.xyz_x2deg = np.array((
            0.000129900000, 0.000232100000, 0.000414900000, 0.000741600000, 0.001368000000, 0.002236000000,
            0.004243000000, 0.007650000000, 0.014310000000, 0.023190000000, 0.043510000000, 0.077630000000,
            0.134380000000, 0.214770000000, 0.283900000000, 0.328500000000, 0.348280000000, 0.348060000000,
            0.336200000000, 0.318700000000, 0.290800000000, 0.251100000000, 0.195360000000, 0.142100000000,
            0.095640000000, 0.057950010000, 0.032010000000, 0.014700000000, 0.004900000000, 0.002400000000,
            0.009300000000, 0.029100000000, 0.063270000000, 0.109600000000, 0.165500000000, 0.225749900000,
            0.290400000000, 0.359700000000, 0.433449900000, 0.512050100000, 0.594500000000, 0.678400000000,
            0.762100000000, 0.842500000000, 0.916300000000, 0.978600000000, 1.026300000000, 1.056700000000,
            1.062200000000, 1.045600000000, 1.002600000000, 0.938400000000, 0.854449900000, 0.751400000000,
            0.642400000000, 0.541900000000, 0.447900000000, 0.360800000000, 0.283500000000, 0.218700000000,
            0.164900000000, 0.121200000000, 0.087400000000, 0.063600000000, 0.046770000000, 0.032900000000,
            0.022700000000, 0.015840000000, 0.011359160000, 0.008110916000, 0.005790346000, 0.004109457000,
            0.002899327000, 0.002049190000, 0.001439971000, 0.000999949300, 0.000690078600, 0.000476021300,
            0.000332301100, 0.000234826100, 0.000166150500, 0.000117413000, 0.000083075270, 0.000058706520,
            0.000041509940, 0.000029353260, 0.000020673830, 0.000014559770, 0.000010253980, 0.000007221456,
            0.000005085868, 0.000003581652, 0.000002522525, 0.000001776509, 0.000001251141))
        self.xyz_y2deg = np.array((
            0.000003917000, 0.000006965000, 0.000012390000, 0.000022020000, 0.000039000000, 0.000064000000,
            0.000120000000, 0.000217000000, 0.000396000000, 0.000640000000, 0.001210000000, 0.002180000000,
            0.004000000000, 0.007300000000, 0.011600000000, 0.016840000000, 0.023000000000, 0.029800000000,
            0.038000000000, 0.048000000000, 0.060000000000, 0.073900000000, 0.090980000000, 0.112600000000,
            0.139020000000, 0.169300000000, 0.208020000000, 0.258600000000, 0.323000000000, 0.407300000000,
            0.503000000000, 0.608200000000, 0.710000000000, 0.793200000000, 0.862000000000, 0.914850100000,
            0.954000000000, 0.980300000000, 0.994950100000, 1.000000000000, 0.995000000000, 0.978600000000,
            0.952000000000, 0.915400000000, 0.870000000000, 0.816300000000, 0.757000000000, 0.694900000000,
            0.631000000000, 0.566800000000, 0.503000000000, 0.441200000000, 0.381000000000, 0.321000000000,
            0.265000000000, 0.217000000000, 0.175000000000, 0.138200000000, 0.107000000000, 0.081600000000,
            0.061000000000, 0.044580000000, 0.032000000000, 0.023200000000, 0.017000000000, 0.011920000000,
            0.008210000000, 0.005723000000, 0.004102000000, 0.002929000000, 0.002091000000, 0.001484000000,
            0.001047000000, 0.000740000000, 0.000520000000, 0.000361100000, 0.000249200000, 0.000171900000,
            0.000120000000, 0.000084800000, 0.000060000000, 0.000042400000, 0.000030000000, 0.000021200000,
            0.000014990000, 0.000010600000, 0.000007465700, 0.000005257800, 0.000003702900, 0.000002607800,
            0.000001836600, 0.000001293400, 0.000000910930, 0.000000641530, 0.000000451810))
        self.xyz_z2deg = np.array((
            0.000606100000, 0.001086000000, 0.001946000000, 0.003486000000, 0.006450001000, 0.010549990000,
            0.020050010000, 0.036210000000, 0.067850010000, 0.110200000000, 0.207400000000, 0.371300000000,
            0.645600000000, 1.039050100000, 1.385600000000, 1.622960000000, 1.747060000000, 1.782600000000,
            1.772110000000, 1.744100000000, 1.669200000000, 1.528100000000, 1.287640000000, 1.041900000000,
            0.812950100000, 0.616200000000, 0.465180000000, 0.353300000000, 0.272000000000, 0.212300000000,
            0.158200000000, 0.111700000000, 0.078249990000, 0.057250010000, 0.042160000000, 0.029840000000,
            0.020300000000, 0.013400000000, 0.008749999000, 0.005749999000, 0.003900000000, 0.002749999000,
            0.002100000000, 0.001800000000, 0.001650001000, 0.001400000000, 0.001100000000, 0.001000000000,
            0.000800000000, 0.000600000000, 0.000340000000, 0.000240000000, 0.000190000000, 0.000100000000,
            0.000049999990, 0.000030000000, 0.000020000000, 0.000010000000, 0.000000000000, 0.000000000000,
            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000))



class CIExyPoint:
    """CIE 1931/1976 Color Points
    """
    def __init__(self, x: float, y: float):
        self.x = x
        self.y = y
        self.up, self.vp = xy_to_upvp(x, y)
        if 0.28315 <= x <= 0.4560 and 0.29711 <= y <= 0.4078:
            self.cct = xy_to_cct(x, y)
        else:
            self.cct = 0



class WhitePoint2deg10deg:
    def __init__(self, x2: float, y2: float, x10: float, y10: float, cct: float, note: str=""):
        self.x2: float = x2  # CIE-1931 2-degree
        self.y2: float = y2
        self.x10: float = x10  # CIE-1931 10-degree
        self.y10: float = y10
        self.cct: float = cct
        self.note: str = note


class WhitePoint:
    def __init__(self, x: float, y: float, cct: float, note: str=""):
        self.x: float = x  # CIE-1931 2-degree
        self.y: float = y
        self.cct: float = cct
        self.note: str = note


class StandardIlluminants:
    """ CIE Standard illuminants

    https://en.wikipedia.org/wiki/Standard_illuminant#White_points_of_standard_illuminants
    """
    def __init__(self, name: str=CIE_DEFAULT_ILLUMINANT):
        self.illuminants = {  # (x2, y2, x10, y10, cct, note)  # 2-degrees
            "A":   (0.44758, 0.40745, 0.45117, 0.40594, 2856, "incandescent / tungsten"),
            "B":   (0.34842, 0.35161, 0.34980, 0.35270, 4874, "obsolete, direct sunlight at noon"),
            "C":   (0.31006, 0.31616, 0.31039, 0.31905, 6774, "obsolete, average / North sky daylight"),
            "D50": (0.34567, 0.35850, 0.34773, 0.35952, 5003, "horizon light, ICC profile PCS"),
            "D55": (0.33242, 0.34743, 0.33411, 0.34877, 5503, "mid-morning / mid-afternoon daylight"),
            "D65": (0.31272, 0.32903, 0.31382, 0.33100, 6504, "noon daylight: television, sRGB color space"),
            "D75": (0.29902, 0.31485, 0.29968, 0.31740, 7504, "North sky daylight"),
            "D93": (0.28315, 0.29711, 0.28327, 0.30043, 9305, "high-efficiency blue phosphor monitors, BT.2035, NTSC-J"),
            "E":   (0.33333, 0.33333, 0.33333, 0.33333, 5454, "equal energy"),
            "F1":  (0.31310, 0.33727, 0.31811, 0.33559, 6430, "daylight fluorescent"),
            "F2":  (0.37208, 0.37529, 0.37925, 0.36733, 4230, "cool white fluorescent"),
            "F3":  (0.40910, 0.39430, 0.41761, 0.38324, 3450, "white fluorescent"),
            "F4":  (0.44018, 0.40329, 0.44920, 0.39074, 2940, "warm white fluorescent"),
            "F5":  (0.31379, 0.34531, 0.31975, 0.34246, 6350, "daylight fluorescent"),
            "F6":  (0.37790, 0.38835, 0.38660, 0.37847, 4150, "light white fluorescent"),
            "F7":  (0.31292, 0.32933, 0.31569, 0.32960, 6500, "D65 simulator, daylight simulator"),
            "F8":  (0.34588, 0.35875, 0.34902, 0.35939, 5000, "D50 simulator, Sylvania F40 Design 50"),
            "F9":  (0.37417, 0.37281, 0.37829, 0.37045, 4150, "cool white deluxe fluorescent"),
            "F10": (0.34609, 0.35986, 0.35090, 0.35444, 5000, "Philips TL85, Ultralume 50"),
            "F11": (0.38052, 0.37713, 0.38541, 0.37123, 4000, "Philips TL84, Ultralume 40"),
            "F12": (0.43695, 0.40441, 0.44256, 0.39717, 3000, "Philips TL83, Ultralume 30"),
        }
        self.selected_illuminant = self.illuminants[name]


    def xy(self, deg: int=2):
        s = self.selected_illuminant
        if deg == 10:
            x, y = s[2], s[3]
        else:
            x, y = s[0], s[1]
        return x, y


    def XYZ(self, deg: int=2):
        s = self.selected_illuminant
        if deg == 10:
            x, y, z = xy_to_XYZ(s[2], s[3])
        else:
            x, y, z = xy_to_XYZ(s[0], s[1])
        return x, y, z


    def upvp(self, deg: int=2):
        x, y = self.xy(deg)
        return xy_to_upvp(x, y)


    def uv(self, deg: int=2 | 10):
        x, y = self.xy(deg)
        return xy_to_uv(x, y)


    def cct(self):
        return self.selected_illuminant[4]


    def note(self, illuminant_name: str):
        return self.selected_illuminant[5]



class DominantWavelength_deprecated():
    """Get DominantWavelength by CIExy

    - Reference Illuminant: Illuminant-E (x,y=0.33333, 0.33333)
    """
    def __init__(self):
        self._wd = np.array(range(360, 830+1, 5))
        self._atan2deg = np.array((
            -154.3144167,-154.2604057,-154.2146045,-154.1732735,-154.1320055,-154.1161176,-154.0913345,-154.0568107,-154.0340378,
            -153.9910149,-153.9267818,-153.8555947,-153.7415474,-153.5386078,-153.2611995,-152.8663333,-152.3532306,-151.6757901,
            -150.7594072,-149.5829842,-148.0483894,-146.0143213,-142.7900297,-137.7700647,-129.6559641,-116.6163698,-97.58780477,
            -75.63327873,-57.75936398,-45.70277789,-37.46541907,-31.59947702,-27.36497888,-23.97391041,-20.706046,-17.3964878,
            -13.83942115,-9.803193952,-5.051212351,0.709307427,7.77876174,16.3953745,26.5730936,37.8938771,49.45448289,60.19991678,
            69.39885829,76.81423863,82.40585956,86.71730509,89.88326155,92.24380447,93.99129883,95.29408737,96.29270326,97.09792277,
            97.736431,98.23292322,98.59166353,98.86592141,99.06782953,99.20004276,99.3060969,99.39083656,99.47203313,99.54507464,
            99.58469554,99.6079443,99.61928357,99.61928207,99.61927953,99.61928253,99.61928138,99.61928092,99.61927538,99.61927999,
            99.61928161,99.61928092,99.61928218,99.61928115,99.61927538,99.61927158,99.6192808,99.61927919,99.61927907,99.61927919,
            99.61927562,99.61927804,99.61927953,99.61927988,99.61928069,99.61928195,99.61927907,99.61927746,99.61927619))
        # self._wdfunc = interp1d(self._atan2deg, self._wd)  # Scipy를 사용하는 경우
        self._wdfunc = np.interp(self._atan2deg, self._atan2deg, self._wd)  # Numpy를 사용하는 경우


    def xy_to_wavelength(self, x, y):
        x, y = np.array(x), np.array(y)
        _shape = x.shape

        xw, yw = 1/3, 1/3  # 원점
        dx = x.flatten()-xw if x.size > 1 else x-xw
        dy = y.flatten()-yw if y.size > 1 else y-yw  # 거리
        dxy = np.sqrt(dx**2 + dy**2)  # distance from 원점

        deg = np.degrees(np.arctan2(dx, dy))  # 방사각

        # 마젠타 파장은 purplish blue, purplish red 로 치환
        # magenta = np.where(deg < self._atan2deg[0], -1, 1) * np.where(deg > self._atan2deg[-1], -1, 1)
        deg = np.where(deg < self._atan2deg[0], self._atan2deg[0], deg)  # Purplish Blue: 360nm 지정
        deg = np.where(deg > self._atan2deg[-1], self._atan2deg[-1], deg)  # Purplish Red: 830nm 지정

        # deg_magenta = np.where(magenta>0, deg, np.degrees(np.arctan2(-dx, -dy)))  # magenta 파장은 상보색(-)으로 대체
        # wd_magenta = np.interp(deg_magenta, self._atan2deg, self._wdfunc)  # magenta를 상보색으로 처리
        wd = np.interp(deg, self._atan2deg, self._wdfunc)  # magenta를 딥블루,딥레드로 처리
        # wd = wd_magenta * magenta

        # wd = np.where(dxy < 0.1, self._wd[0], wd)  # White부근은 360nm로 고정
        wd = np.where(dxy < 0.001, 0, wd)  # White부근은 중심파장 0으로 고정
        wd_reshaped = wd.reshape(_shape)
        return wd_reshaped



class DominantWavelength:
    """Convert wavelength to CIE1931-xy or xy to wavelength.

    Reference:
    - https://cie.co.at/datatable/cie-1931-chromaticity-coordinates-spectrum-loci-2-degree-observer
    """
    # def __init__(self, refwhite: str=CIE_DEFAULT_ILLUMINANT):
    def __init__(self, refwhite: str | tuple):
        default_illuminant = StandardIlluminants(CIE_DEFAULT_ILLUMINANT)
        self.white_x, self.white_y = default_illuminant.xy()
        if refwhite:
            if isinstance(refwhite, str):
                if refwhite in default_illuminant.illuminants.keys():
                    self.white_x, self.white_y = StandardIlluminants(refwhite).xy()
            elif isinstance(refwhite, tuple):
                if len(refwhite) == 3:
                    self.white_x, self.white_y = XYZ_to_xy(refwhite[0], refwhite[1], refwhite[2])
                elif len(refwhite) == 2:
                    self.white_x, self.white_y = refwhite[0], refwhite[1]

        # CIE 1931 chromaticity coordinates of spectrum loci, 2 degree observer
        self.w1nm =np.array(range(360, 830+1, 1))
        self.x1nm = np.array((
            0.17556,0.17548,0.1754,0.17532,0.17524,0.17516,0.17509,0.17501,0.17494,0.17488,
            0.17482,0.17477,0.17472,0.17466,0.17459,0.17451,0.17441,0.17431,0.17422,0.17416,
            0.17411,0.17409,0.17407,0.17406,0.17404,0.17401,0.17397,0.17393,0.17389,0.17384,
            0.1738,0.17376,0.1737,0.17366,0.17361,0.17356,0.17351,0.17347,0.17342,0.17338,
            0.17334,0.17329,0.17324,0.17317,0.1731,0.17302,0.17293,0.17284,0.17275,0.17266,
            0.17258,0.17249,0.17239,0.1723,0.17219,0.17209,0.17198,0.17187,0.17174,0.17159,
            0.17141,0.17121,0.17099,0.17077,0.17054,0.1703,0.17005,0.16978,0.1695,0.1692,
            0.16888,0.16853,0.16815,0.16775,0.16733,0.1669,0.16645,0.16598,0.16548,0.16496,
            0.16441,0.16383,0.16321,0.16255,0.16185,0.16111,0.16031,0.15947,0.15857,0.15763,
            0.15664,0.1556,0.15452,0.1534,0.15222,0.15099,0.14969,0.14834,0.14693,0.14547,
            0.14396,0.14241,0.1408,0.13912,0.13737,0.1355,0.13351,0.13137,0.12909,0.12666,
            0.12412,0.12147,0.1187,0.11581,0.11278,0.1096,0.10626,0.10278,0.09913,0.09531,
            0.09129,0.08708,0.08268,0.07812,0.07344,0.06871,0.06399,0.05932,0.05467,0.05003,
            0.04539,0.04076,0.0362,0.03176,0.02749,0.02346,0.0197,0.01627,0.01318,0.01048,
            0.00817,0.00628,0.00487,0.00398,0.00364,0.00386,0.00464,0.00601,0.00799,0.0106,
            0.01387,0.01777,0.02224,0.02727,0.03282,0.03885,0.04533,0.05218,0.05932,0.06672,
            0.0743,0.08205,0.08994,0.09794,0.10602,0.11416,0.12235,0.13055,0.1387,0.14677,
            0.15472,0.16253,0.17024,0.17785,0.18539,0.19288,0.20031,0.20769,0.21503,0.22234,
            0.22962,0.23689,0.24413,0.25136,0.25858,0.26578,0.27296,0.28013,0.28729,0.29445,
            0.3016,0.30876,0.31592,0.32306,0.33021,0.33736,0.34451,0.35167,0.35881,0.36596,
            0.3731,0.38024,0.38738,0.39451,0.40163,0.40873,0.41583,0.42292,0.42999,0.43704,
            0.44406,0.45106,0.45804,0.46499,0.4719,0.47878,0.48561,0.49241,0.49915,0.50585,
            0.51249,0.51907,0.5256,0.53207,0.53846,0.54479,0.55103,0.55719,0.56327,0.56926,
            0.57515,0.58094,0.58665,0.59222,0.59766,0.60293,0.60803,0.61298,0.61778,0.62246,
            0.62704,0.63152,0.6359,0.64016,0.64427,0.64823,0.65203,0.65567,0.65917,0.66253,
            0.66576,0.66887,0.67186,0.67472,0.67746,0.68008,0.68258,0.68497,0.68725,0.68943,
            0.69151,0.69349,0.69539,0.69721,0.69894,0.70061,0.70219,0.70371,0.70516,0.70656,
            0.70792,0.70923,0.7105,0.71173,0.7129,0.71403,0.71512,0.71616,0.71716,0.71812,
            0.71903,0.71991,0.72075,0.72155,0.72232,0.72303,0.7237,0.72433,0.72491,0.72547,
            0.72599,0.72649,0.72698,0.72743,0.72786,0.72827,0.72866,0.72902,0.72936,0.72968,
            0.72997,0.73023,0.73047,0.73069,0.7309,0.73109,0.73128,0.73147,0.73165,0.73183,
            0.73199,0.73215,0.7323,0.73244,0.73258,0.73272,0.73286,0.733,0.73314,0.73328,
            0.73342,0.73355,0.73368,0.73381,0.73394,0.73405,0.73414,0.73422,0.73429,0.73434,
            0.73439,0.73444,0.73448,0.73452,0.73456,0.73459,0.73462,0.73465,0.73467,0.73469,
            0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,
            0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,
            0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,
            0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,
            0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,
            0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,
            0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,
            0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,
            0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,
            0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,
            0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,
            0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,
            0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469,0.73469))
        self.y1nm = np.array((
            0.00529,0.00529,0.00528,0.00527,0.00526,0.00526,0.00525,0.00524,0.00523,0.00522,
            0.00522,0.00523,0.00524,0.00524,0.00522,0.00518,0.00513,0.00507,0.00502,0.00498,
            0.00496,0.00496,0.00497,0.00498,0.00498,0.00498,0.00497,0.00494,0.00493,0.00492,
            0.00492,0.00492,0.00494,0.00494,0.00494,0.00492,0.0049,0.00486,0.00484,0.00481,
            0.0048,0.00479,0.00478,0.00478,0.00477,0.00478,0.00478,0.00479,0.0048,0.0048,
            0.0048,0.0048,0.0048,0.0048,0.00482,0.00483,0.00486,0.00489,0.00494,0.00501,0.0051,
            0.00521,0.00533,0.00547,0.00562,0.00579,0.00597,0.00618,0.0064,0.00664,0.0069,
            0.00718,0.00749,0.00782,0.00817,0.00855,0.00896,0.0094,0.00987,0.01035,0.01086,
            0.01138,0.01194,0.01252,0.01314,0.01379,0.01449,0.01523,0.01602,0.01684,0.01771,
            0.01861,0.01956,0.02055,0.02161,0.02274,0.02395,0.02525,0.02663,0.02812,0.0297,
            0.03139,0.03321,0.0352,0.0374,0.03988,0.04269,0.04588,0.04945,0.05343,0.0578,
            0.06259,0.06783,0.07358,0.07989,0.08684,0.09449,0.10286,0.11201,0.12194,0.1327,
            0.14432,0.15687,0.17042,0.18503,0.20072,0.21747,0.23525,0.25409,0.274,0.29498,
            0.31698,0.3399,0.3636,0.38792,0.4127,0.43776,0.46295,0.48821,0.5134,0.53842,0.56307,
            0.58712,0.61045,0.63301,0.65482,0.6759,0.69612,0.71534,0.73341,0.75019,0.76561,
            0.77963,0.79211,0.80293,0.81202,0.81939,0.82516,0.82943,0.83227,0.8338,0.83409,
            0.83329,0.83159,0.82918,0.82621,0.82277,0.81893,0.81478,0.8104,0.80586,0.80124,
            0.79652,0.79169,0.78673,0.78163,0.7764,0.77105,0.76559,0.76002,0.75433,0.74852,
            0.74262,0.73661,0.73051,0.72432,0.71806,0.71172,0.70532,0.69884,0.69231,0.68571,
            0.67906,0.67237,0.66563,0.65885,0.65203,0.64517,0.63829,0.63138,0.62445,0.6175,
            0.61054,0.60357,0.59659,0.58961,0.58262,0.57563,0.56865,0.56167,0.55472,0.54777,
            0.54084,0.53393,0.52705,0.5202,0.51339,0.50661,0.49989,0.49321,0.48659,0.48003,
            0.47353,0.46709,0.46073,0.45443,0.44823,0.4421,0.43606,0.4301,0.42423,0.41846,
            0.41276,0.40719,0.40176,0.3965,0.39141,0.38648,0.38171,0.37705,0.37249,0.36803,
            0.36367,0.35943,0.35533,0.3514,0.34763,0.34402,0.34055,0.33722,0.33401,0.33092,
            0.32795,0.32509,0.32236,0.31975,0.31725,0.31486,0.31259,0.31041,0.30834,0.30637,
            0.30448,0.30267,0.30095,0.2993,0.29773,0.29622,0.29477,0.29338,0.29203,0.29072,
            0.28945,0.28823,0.28706,0.28593,0.28484,0.2838,0.28281,0.28185,0.28094,0.28006,
            0.27922,0.27842,0.27766,0.27695,0.27628,0.27566,0.27508,0.27453,0.27401,0.27351,
            0.27302,0.27257,0.27214,0.27173,0.27134,0.27098,0.27064,0.27032,0.27003,0.26977,
            0.26953,0.26931,0.2691,0.26891,0.26872,0.26853,0.26835,0.26817,0.26801,0.26785,
            0.2677,0.26756,0.26742,0.26728,0.26714,0.267,0.26686,0.26672,0.26658,0.26645,
            0.26632,0.26619,0.26606,0.26595,0.26586,0.26578,0.26571,0.26566,0.26561,0.26556,
            0.26552,0.26548,0.26544,0.26541,0.26538,0.26535,0.26533,0.26531,0.26531,0.26531,
            0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,
            0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,
            0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,
            0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,
            0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,
            0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,
            0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,
            0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,
            0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,
            0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,
            0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,
            0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,
            0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531,0.26531))

        # CIE1931 chromaticity coordinates of spectrum loci by angle(degree) with atan, reference white is E-illuminant
        self.w5nm = np.array(range(360, 830+1, 5))
        self.atan5nm2deg = np.array((
            -154.3144167,-154.2604057,-154.2146045,-154.1732735,-154.1320055,-154.1161176,-154.0913345,-154.0568107,-154.0340378,
            -153.9910149,-153.9267818,-153.8555947,-153.7415474,-153.5386078,-153.2611995,-152.8663333,-152.3532306,-151.6757901,
            -150.7594072,-149.5829842,-148.0483894,-146.0143213,-142.7900297,-137.7700647,-129.6559641,-116.6163698,-97.58780477,
            -75.63327873,-57.75936398,-45.70277789,-37.46541907,-31.59947702,-27.36497888,-23.97391041,-20.706046,-17.3964878,
            -13.83942115,-9.803193952,-5.051212351,0.709307427,7.77876174,16.3953745,26.5730936,37.8938771,49.45448289,60.19991678,
            69.39885829,76.81423863,82.40585956,86.71730509,89.88326155,92.24380447,93.99129883,95.29408737,96.29270326,97.09792277,
            97.736431,98.23292322,98.59166353,98.86592141,99.06782953,99.20004276,99.3060969,99.39083656,99.47203313,99.54507464,
            99.58469554,99.6079443,99.61928357,99.61928207,99.61927953,99.61928253,99.61928138,99.61928092,99.61927538,99.61927999,
            99.61928161,99.61928092,99.61928218,99.61928115,99.61927538,99.61927158,99.6192808,99.61927919,99.61927907,99.61927919,
            99.61927562,99.61927804,99.61927953,99.61927988,99.61928069,99.61928195,99.61927907,99.61927746,99.61927619))
        self.deg2wld = np.interp(self.atan5nm2deg, self.atan5nm2deg, self.w5nm)
        self.calc_dxdy()


    def calc_dxdy(self):
        dx1nm = self.x1nm - self.white_x
        dy1nm = self.y1nm - self.white_y
        self.atan1nmrad = np.arctan2(dx1nm, dy1nm) # xy를 swap해서 적용(atan2함수를 증가방향으로 적용하기 위함)


    def set_userwhite(self, white_x: float, white_y: float):
        self.white_x = white_x
        self.white_y = white_y
        self.calc_dxdy()


    def wavelength_to_xy(self, wld):
        """Convert wavelength(nm) to CIE1931-xy
        """
        wld = np.array(wld)
        x = np.interp(wld, self.w1nm, self.x1nm)
        y = np.interp(wld, self.w1nm, self.y1nm)
        return x, y


    # def xy_to_atan_to_wavelength_with_illuminant_E(self, x, y):
    def xy_to_wavelength(self, x, y):
        """Convert CIE1931-xy to wavelength(nm)
        """
        x, y = np.array(x), np.array(y)
        xw, yw = self.white_x, self.white_y  # 원점
        dx, dy = x - xw, y - yw  # 거리

        rad_over = np.arctan2(self.x1nm[-1]-xw, self.y1nm[-1]-yw)  # magenta 영역 (830nm이상 파장의 rad값)
        rad_under = np.arctan2(self.x1nm[0]-xw, self.y1nm[0]-yw)  # magenta area (360nm이하파장의 rad값)

        rad = np.arctan2(dx, dy) # xy를 swap해서 적용(atan2함수를 증가방향으로 적용하기 위함)
        magenta_mask = np.where(rad > rad_over, -1, 1) * np.where(rad < rad_under, -1, 1)  # magenta 파장은 -1, 그외는 1
        rad = np.where(rad > rad_over, rad - np.pi, rad)
        rad_final = np.where(rad < rad_under, rad + np.pi, rad)
        wld = np.interp(rad_final, self.atan1nmrad, self.w1nm)
        wld_final = wld * magenta_mask
        return wld_final



def spectral_power_of_standard_illuminant_a(wave):
    """Spectral Power Distribution of Standard Illuminant A

    https://en.wikipedia.org/wiki/Standard_illuminant#Illuminant_A
    """
    w = np.array(wave)
    a = 1.435e7 / 2848
    spd = 100 * (560/w)**5 * (np.exp(a/560) - 1) / (np.exp(a/w) - 1)
    return spd



# def spectral_power_of_standard_illuminant_d(wave):
#     """Spectral Power Distribution of Standard Illuminant D

#     https://en.wikipedia.org/wiki/Standard_illuminant#Illuminant_A
#     """
#     w = np.array(wave)
#     xd, yd = cct_to_xy(w)
#     m = 0.0241 + 0.2562 * xd - 0.7341 * yd
#     m1 = (-1.3515 - 1.7703 * xd + 5.9114 * yd) / m
#     m2 = (0.0300 - 31.4424 * xd + 30.0717 * yd) / m
#     spd = s0(w) + m1 * s1(w) + m2 * s2(w)
#     return spd



def cct_to_xy(t):
    """D광원에서 색온도에 해당하는 색좌표 x,y를 반환
    """
    if 4000. <= t <= 7000.:
        xd = (-4.6070e9 / t**3) + (2.9678e6 / t**2) + (0.09911e3 / t) + 0.244063
    elif 7000. < t <= 25000.:
        xd = (-2.0064e9 / t**3) + (1.9018e6 / t**2) + (0.24748e3 / t) + 0.237040
    else:
        xd = 0
    yd = -3.000 * xd**2 + 2.870 * xd - 0.275
    return xd, yd



def reshape_ignore_leading_ones(a):
    """배열의 shape 의 1을 제거한 배열로 변환

    Example:
        [[[1,2]]] >> [1,2]
    """
    arr = np.array(a)
    shape = arr.shape
    new_shape = tuple(dim for dim in shape if dim != 1)
    reshaped_arr = arr.reshape(new_shape)
    return reshaped_arr


